apiVersion: apps/v1
kind: Deployment
metadata:
  name: radm-detector
  labels:
    app: radm-detector
    component: anomaly-detection
    version: v1.0.0
    managed-by: axiomhive-scgo
spec:
  replicas: 3
  selector:
    matchLabels:
      app: radm-detector
  template:
    metadata:
      labels:
        app: radm-detector
        component: anomaly-detection
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: radm-detector
        image: axiomhive/radm-detector:latest
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: AD_WINDOW_SIZE
          value: "500"
        - name: AD_THRESHOLD
          value: "3.5"
        - name: SERVER_PORT
          value: "8080"
        - name: MONETIZATION_ENABLED
          value: "true"
        - name: MONETIZATION_BASE_PRICE
          value: "0.001"
        - name: RATE_LIMIT_ENABLED
          value: "true"
        - name: RATE_LIMIT_REQUESTS_PER_SECOND
          value: "1000"
        - name: VALIDATION_ENABLED
          value: "true"
        resources:
          requests:
            cpu: "200m" # Guaranteed CPU for A-2 Latency compliance
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "256Mi"
        livenessProbe: # Protocol β-RedTeam resilience check
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe: # Protocol β-RedTeam readiness check
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      securityContext:
        fsGroup: 1000
      serviceAccountName: radm-service-account
---
apiVersion: v1
kind: Service
metadata:
  name: radm-detector-service
  labels:
    app: radm-detector
    component: anomaly-detection
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: radm-detector
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: radm-service-account
  labels:
    app: radm-detector
    component: anomaly-detection
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: radm-detector-role
  labels:
    app: radm-detector
    component: anomaly-detection
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: radm-detector-role-binding
  labels:
    app: radm-detector
    component: anomaly-detection
subjects:
- kind: ServiceAccount
  name: radm-service-account
  namespace: default
roleRef:
  kind: Role
  name: radm-detector-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: radm-detector-pdb
  labels:
    app: radm-detector
    component: anomaly-detection
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: radm-detector
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: radm-detector-hpa
  labels:
    app: radm-detector
    component: anomaly-detection
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: radm-detector
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60